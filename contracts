pragma solidity ^0.8.30; 

/// @title KipuBank - Es Un contrato de bóveda de depósito con límite por transacción y capacidad total, ademas permite a los usuarios depositar y retirar ETH con restricciones.
 
///@dev Usa prácticas de seguridad estándar como errores personalizados, patrón checks-effects-interactions, y eventos.

contract KipuBank {

    /// @notice Se emite cuando el usuario realiza un deposito exitoso .
    /// @param user la direccion del usuario y el amount la cantidad de ETH depositada.

    event DepositoRealizado(address indexed usuario, uint256 monto);
    
    /// @notice Se emite cuando el usuario realiza un retiro exitoso .
    /// @param user la direccion del usuario y el amount la cantidad de ETH retirada.
    

    event RetiroRealizado(address indexed usuario, uint256 monto);

    ///@param Errores

    /// @notice Se lanza cuando un deposito excede la capacidad bancaria global
    error MaxDepositoExcedido();

    /// @notice Cuando un retiro excede el limite de transacción.
    error MaxRetiroExcedido();

    /// @notice Cuando un usuario intenta retirar mas de su saldo 
    error saldoInsuficiente();

    /// @notice Al intentar depositar cero ETH.
    error depositoCeroNoPermitido();

    // @param Variables de estado 

    /// @notice Máximo permitido por transacción de retiro.
    uint256 public immutable limiteRetiro;

    /// @notice Capacidad total del banco en ETH.
    uint256 public immutable capacidadTotalDelBanco;

    /// @notice Total actual de todos los depósitos en el contrato.
    uint256 public totalDepositos;

    /// @notice Registro de fondos de cada usuario.
    mapping(address => uint256) private saldoBoveda;

    /// @notice Conteo de depósitos por usuario.
    mapping(address => uint256) public contadorDepositos;

    /// @notice Conteo de retiros por usuario.
    mapping(address => uint256) public contadorRetiros;

    //@param Constructor 

    /// @notice Constructor que inicializa el contrato con los límites establecidos.
    /// @param _maxRetiro Límite máximo de retiro por transacción.
    /// @param _totalDeposito Capacidad total del banco.
    
    constructor(uint256 _maxRetiro, uint256 _totalDeposito) {
        require(_maxRetiro > 0, "Maximo de retiro invalido");
        require(_totalDeposito > 0, "Total de deposito invalido");

        maxRetiro = _maxRetiro;
        totalDeposito = _totalDeposito;
    }

    // @param Modificadores 
    

    /// @notice Verifica que la cantidad enviada sea mayor a 0.
    modifier depositoNoCero() {
        if (msg.value == 0) {
            revert depositoCeroNoPermitido();
        }
        _;
    }

    /// @notice Verifica que el retiro esté dentro del maximo permitido.
    /// @param monto Cantidad a retirar.
    modifier maximoPermitido(uint256 monto) {
        if (monto > maxRetiro) {
            revert MaxRetiroExcedido();
        }
        _;
    }

    // @param Funciones 

    /// @notice Deposita ETH en la bóveda personal del usuario.
    /// @dev Verifica limite global y registra deposito.
    
    function depositar() external payable depositoNoCero {
        if (totalDepositos + msg.value > capacidadTotalDelBanco) revert MaxDepositoExcedido();

        saldoBoveda[msg.sender] += msg.value;
        totalDepositos += msg.value;
        contadorDepositos[msg.sender]++;

        emit DepositoRealizado(msg.sender, msg.value);
    }

    /// @notice Retira una cantidad específica de ETH de la bóveda del usuario.
    /// @param monto La cantidad de ETH a retirar y usa transferencias seguras y errores personalizados.
   
  function retirar(uint256 monto)
        external
        MaxRetiroExcedido(monto)
    {
        if (userVaults[msg.sender] < monto) revert saldoInsuficiente();
        

        
        saldoBoveda[msg.sender] -= amount;
        totalDepositos -= amount;
        contadorRetiros[msg.sender]++;

        _transferenciaSegura(msg.sender, monto);
        emit RetiroRealizado(msg.sender, amount);
    }

    /// @notice Consulta el saldo actual de un usuario en su bóveda.
    /// @param usuario Dirección del usuario y devuelve el saldo actual de ETH del usuario.
    
    function consultarSaldo(address usuario) external view returns (uint256) {
        return saldoBoveda[usuario];
    }

    // @param Funciones Privadas 

    /// @dev Maneja la transferencia segura de ETH.
    /// @param destinatario Dirección a la que se enviará el ETH y monto Cantidad de ETH a transferir.
    
    function _transferenciaSegura(address destinatario, uint256 monto) private {
        (bool exito, ) = destinatario.call{value: monto}("");
        require(exito, "Fallo la transferencia de ETH");
    }

   
    /// @notice Rechaza cualquier ETH enviado por error.
    receive() external payable {
        revert("Transferencias directas no permitidas");
    }
}
